module ietf-srv6-base {

  namespace "urn:ietf:params:xml:ns:yang:ietf-srv6-base";
  prefix srv6;

  import ietf-inet-types {
    prefix inet;
  }

  import ietf-yang-types {
    prefix "yang";
  }
  
  import ietf-routing {
    prefix "rt";
  }
  
  import ietf-srv6-types {
    prefix srv6-types;
  }
  
  organization
    "IETF SPRING Working Group";
  contact
    "WG Web:   <http://tools.ietf.org/wg/spring/>
     WG List:  <mailto:spring@ietf.org>

     WG Chair: Bruno Decraene
               <mailto:loa@pi.nu>

     WG Chair: Martin Vigoureux 
               <mailto:rcallon@juniper.net>

     Editor:   Kamran Raza
               <mailto:skraza@cisco.com>

     Editor:   Jaganbabu Rajamanickam
               <maito:jrajaman@cisco.com>

     Editor:   Xufeng Liu
               <mailto:Xufeng_Liu@jabil.com>

     Editor:   Iftekhar Hussain
               <mailto:IHussain@infinera.com>

     Editor:   Himanshu Shah
               <mailto:hshah@ciena.com>

     Editor:   Daniel Voyer
               <mailto:daniel.voyerbell.ca>

     ";
	      
  description
    "This YANG module defines the essential elements for the
     management of Segment-Routing with IPv6 dataplane (SRv6).

     Copyright (c) 2017 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).";

  reference "RFC XXXX";

  revision 2017-11-01 {
    description
      "Initial revision.";
    reference
      "RFC XXXX: YANG Data Model for SRv6";
  }

 /*
  * Config and State
  */
 
  grouping srv6-locators {
   description "SRv6 locator grouping";
   
   container locators {
      description "SRv6 locators";
      
      list locator {
        key "name";
        description "Configure a SRv6 locator";

        leaf name {
          type string;
          description "Locator name";
        }

        leaf enable {
          type boolean;
          description "Enable a SRv6 locator";
        }
        container prefix {
          description "Specify locator prefix value";
          leaf address {
            type inet:ipv6-address;
            description "IPv6 address";
          }
          leaf length {
            type srv6-types:srv6-locator-len;
            description "Locator (prefix) length";
          }
        }
      }
    }
  }
  
  grouping srv6-state-stats {
   description "SRv6 Statistics grouping";

   container counters {
     config false;
     description "SRv6 counters";

     container global {
       description "SRv6 global counters";
  
       leaf cnt0 {
         type yang:counter64;
         description "Counts SRv6 traffic received/dropped on local prefix not instantiated as local-SID"; 
       }
     }

     list local-sid {
       key "sid";
       description "Per-localSID Counters";
            
       leaf sid {
        type srv6-types:srv6-sid;
	description "Local SID value";
       }

       leaf cnt1 {
         type yang:counter64;
         description "Counts SRv6 traffic received on local-SID prefix and processed successfully"; 
       }
     }
    }
   }

  grouping srv6-support-ends {
    description "SRv6 End behavior support grouping";

   list end-behavior {
     key "type";
     description "End behavior support";
     
     leaf type {
       type srv6-types:srv6-end-types;
       description "End behavior (End*) type";
     }
     leaf supported {
       type boolean;
       description "True if supported";
     }
    }
   }

  grouping srv6-support-transits {
    description "SRv6 Transit behavior support grouping";

   list transit-behavior {
     key "type";
     description "Transit behavior support";
     
     leaf type {
       type srv6-types:srv6-transit-types;
       description "Transit behavior (T*) type";
     }
     leaf supported {
       type boolean;
       description "True if supported";
     }
    }
   }

  grouping srv6-support-signalled {
    description "SRv6 signalled parameter support grouping";

   container signaled-parameters {
     description "SRv6 signalled parameter support";
     
     leaf max-sl {
       type uint8;
       description "Maximum value of the SL field in the SRH of 
                    a received packet before applying the function 
                    associated with a SID";
     }
     leaf max-end-pop-srh {
       type uint8;
       description "Maximum number of SIDs in the top SRH in an 
                    SRH stack to which the router can apply 
                    PSP or USP flavors";
     }
     leaf max-t_insert {
       type uint8;
       description "Maximum number of SIDs that can be inserted as 
                   part of the T.insert behavior"; 
     }
     leaf max-t_encap {
       type uint8;
       description "Maximum number of SIDs that can be inserted as 
                    part of the T.Encap behavior"; 
     }
     leaf max-end_d {
       type uint8;
       description "Maximum number of SIDs in an SRH when applying 
                    End.DX6 and End.DT6 functions";
     }     
    }
  }

  grouping srv6-support-security-rules {
    description "SRv6 Security rules grouping";

   list security-rule {
     key "type";
     description "Security rule support";
     
     leaf type {
       type srv6-types:srv6-security-rule-types;
       description "Security rule type";
     }
     leaf supported {
       type boolean;
       description "True if supported";
     }
    }
   }

  grouping srv6-support-counters {
    description "SRv6 Counters grouping";

   list counters {
     key "type";
     description "SRv6 counter support";
     
     leaf type {
       type srv6-types:srv6-counter-types;
       description "Counter type";
     }
     leaf supported {
       type boolean;
       description "True if supported";
     }
    }
   }
   
   grouping srv6-state-capabilities {
     description "SRv6 node capabilities grouping";
     container node-capabilities {
       config false;
       description "Node's SRv6 capabilities";

       uses srv6-support-ends;
       uses srv6-support-transits;
       uses srv6-support-signalled;
       uses srv6-support-security-rules;
       uses srv6-support-counters;
     }
  }


  augment "/rt:routing" {
     description
      "This augments routing-instance configuration with segment-routing SRv6.";
       
   container srv6 {
    description "Segment Routing with IPv6 dataplane";

    leaf enable {
      type boolean;
      description "Enable SRv6";
    }

    container encapsulation {
      description "Configure encapsulation related parameters";
      leaf source-address {
        type inet:ipv6-address;
        description "Configure a source address (for T.Encap)";
      }
    }

    uses srv6-locators;

    /* state */
    uses srv6-state-capabilities;	
    uses srv6-state-stats;
   }
 }
} // module

